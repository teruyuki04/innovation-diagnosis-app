# スコアに基づいて診断コメントを返す
def get_diagnosis(score: int) -> dict:
    if score <= 10:
        return {
            "phase": "🟥 属人依存の危機",
            "color": "#e63946",
            "comment": (
                "今のままでは属人的な動きに依存しており、全社的な構想には至っていません。\n\n"
                "経営層が意図を語らず、現場も翻訳できていない場合、この状態に陥りやすくなります。\n\n"
                "まずは、「構想の核」を言語化し、現場の解釈を揃えることから始めましょう。"
            )
        }
    elif score <= 16:
        return {
            "phase": "🟧 部分最適の罠",
            "color": "#f4a261",
            "comment": (
                "一部では構想的な動きが出ていますが、全体の接続が弱く、部分最適にとどまっています。\n\n"
                "構想と現場実装のズレや、部門ごとの温度差が目立つ段階です。\n\n"
                "構想と既存事業の“意味のつなぎ直し”が必要です。中期絵姿との再接続も有効です。"
            )
        }
    elif score <= 22:
        return {
            "phase": "🟨 飛躍準備の段階",
            "color": "#e9c46a",
            "comment": (
                "構想の核が共有され始め、複数部門で動き出しが見られる段階です。\n\n"
                "ただし再現性のある仕組みや、共通言語化が不十分なため、飛躍にはあと一歩。\n\n"
                "構想の“共通言語”化、勝ち筋の定着プロセス、経営モニタリングとの接続が求められます。"
            )
        }
    else:
        return {
            "phase": "🟩 拡張の好機",
            "color": "#2a9d8f",
            "comment": (
                "構想が全社的に共有され、各所で展開・再現が始まっている段階です。\n\n"
                "この段階では、経営と現場をつなぐ“仕組み化”が鍵となります。\n\n"
                "構想の進化に向けて、アセット化・人材化・学習化の三位一体を整えていきましょう。"
            )
        }

# 回答（辞書形式）を集計し、合計スコアと内訳を返す関数
def calculate_scores(responses: dict) -> tuple:
    total = sum(responses.values())
    return total, responses

